// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace ServiceWarmup.n178_238_226_7 {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="ServiceSoap", Namespace="http://rextester.com/")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DoWorkOperationCompleted;
        
        private System.Threading.SendOrPostCallback SumOperationCompleted;
        
        private System.Threading.SendOrPostCallback DiffOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPythonDotCompletionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPythonParenCompletionsOperationCompleted;
        
        public Service() {
            this.Url = "http://178.238.226.7/Service.asmx";
        }
        
        public Service(string url) {
            this.Url = url;
        }
        
        public event DoWorkCompletedEventHandler DoWorkCompleted;
        
        public event SumCompletedEventHandler SumCompleted;
        
        public event DiffCompletedEventHandler DiffCompleted;
        
        public event GetPythonDotCompletionsCompletedEventHandler GetPythonDotCompletionsCompleted;
        
        public event GetPythonParenCompletionsCompletedEventHandler GetPythonParenCompletionsCompleted;
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rextester.com/DoWork", RequestNamespace="http://rextester.com/", ResponseNamespace="http://rextester.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public Result DoWork(string Program, string Input, Languages Language, string user, string pass, string compiler_args, bool bytes, bool programCompressed, bool inputCompressed) {
            object[] results = this.Invoke("DoWork", new object[] {
                        Program,
                        Input,
                        Language,
                        user,
                        pass,
                        compiler_args,
                        bytes,
                        programCompressed,
                        inputCompressed});
            return ((Result)(results[0]));
        }
        
        public System.IAsyncResult BeginDoWork(string Program, string Input, Languages Language, string user, string pass, string compiler_args, bool bytes, bool programCompressed, bool inputCompressed, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoWork", new object[] {
                        Program,
                        Input,
                        Language,
                        user,
                        pass,
                        compiler_args,
                        bytes,
                        programCompressed,
                        inputCompressed}, callback, asyncState);
        }
        
        public Result EndDoWork(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }
        
        public void DoWorkAsync(string Program, string Input, Languages Language, string user, string pass, string compiler_args, bool bytes, bool programCompressed, bool inputCompressed) {
            this.DoWorkAsync(Program, Input, Language, user, pass, compiler_args, bytes, programCompressed, inputCompressed, null);
        }
        
        public void DoWorkAsync(string Program, string Input, Languages Language, string user, string pass, string compiler_args, bool bytes, bool programCompressed, bool inputCompressed, object userState) {
            if ((this.DoWorkOperationCompleted == null)) {
                this.DoWorkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            this.InvokeAsync("DoWork", new object[] {
                        Program,
                        Input,
                        Language,
                        user,
                        pass,
                        compiler_args,
                        bytes,
                        programCompressed,
                        inputCompressed}, this.DoWorkOperationCompleted, userState);
        }
        
        private void OnDoWorkCompleted(object arg) {
            if ((this.DoWorkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoWorkCompleted(this, new DoWorkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rextester.com/Sum", RequestNamespace="http://rextester.com/", ResponseNamespace="http://rextester.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public int Sum(int a, int b) {
            object[] results = this.Invoke("Sum", new object[] {
                        a,
                        b});
            return ((int)(results[0]));
        }
        
        public System.IAsyncResult BeginSum(int a, int b, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Sum", new object[] {
                        a,
                        b}, callback, asyncState);
        }
        
        public int EndSum(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        public void SumAsync(int a, int b) {
            this.SumAsync(a, b, null);
        }
        
        public void SumAsync(int a, int b, object userState) {
            if ((this.SumOperationCompleted == null)) {
                this.SumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSumCompleted);
            }
            this.InvokeAsync("Sum", new object[] {
                        a,
                        b}, this.SumOperationCompleted, userState);
        }
        
        private void OnSumCompleted(object arg) {
            if ((this.SumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SumCompleted(this, new SumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rextester.com/Diff", RequestNamespace="http://rextester.com/", ResponseNamespace="http://rextester.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public DiffResult Diff(string left, string right, string user, string pass) {
            object[] results = this.Invoke("Diff", new object[] {
                        left,
                        right,
                        user,
                        pass});
            return ((DiffResult)(results[0]));
        }
        
        public System.IAsyncResult BeginDiff(string left, string right, string user, string pass, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Diff", new object[] {
                        left,
                        right,
                        user,
                        pass}, callback, asyncState);
        }
        
        public DiffResult EndDiff(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DiffResult)(results[0]));
        }
        
        public void DiffAsync(string left, string right, string user, string pass) {
            this.DiffAsync(left, right, user, pass, null);
        }
        
        public void DiffAsync(string left, string right, string user, string pass, object userState) {
            if ((this.DiffOperationCompleted == null)) {
                this.DiffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDiffCompleted);
            }
            this.InvokeAsync("Diff", new object[] {
                        left,
                        right,
                        user,
                        pass}, this.DiffOperationCompleted, userState);
        }
        
        private void OnDiffCompleted(object arg) {
            if ((this.DiffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DiffCompleted(this, new DiffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rextester.com/GetPythonDotCompletions", RequestNamespace="http://rextester.com/", ResponseNamespace="http://rextester.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void GetPythonDotCompletions(string source, int line, int column) {
            this.Invoke("GetPythonDotCompletions", new object[] {
                        source,
                        line,
                        column});
        }
        
        public System.IAsyncResult BeginGetPythonDotCompletions(string source, int line, int column, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPythonDotCompletions", new object[] {
                        source,
                        line,
                        column}, callback, asyncState);
        }
        
        public void EndGetPythonDotCompletions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void GetPythonDotCompletionsAsync(string source, int line, int column) {
            this.GetPythonDotCompletionsAsync(source, line, column, null);
        }
        
        public void GetPythonDotCompletionsAsync(string source, int line, int column, object userState) {
            if ((this.GetPythonDotCompletionsOperationCompleted == null)) {
                this.GetPythonDotCompletionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPythonDotCompletionsCompleted);
            }
            this.InvokeAsync("GetPythonDotCompletions", new object[] {
                        source,
                        line,
                        column}, this.GetPythonDotCompletionsOperationCompleted, userState);
        }
        
        private void OnGetPythonDotCompletionsCompleted(object arg) {
            if ((this.GetPythonDotCompletionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPythonDotCompletionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://rextester.com/GetPythonParenCompletions", RequestNamespace="http://rextester.com/", ResponseNamespace="http://rextester.com/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public void GetPythonParenCompletions(string source, int line, int column) {
            this.Invoke("GetPythonParenCompletions", new object[] {
                        source,
                        line,
                        column});
        }
        
        public System.IAsyncResult BeginGetPythonParenCompletions(string source, int line, int column, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPythonParenCompletions", new object[] {
                        source,
                        line,
                        column}, callback, asyncState);
        }
        
        public void EndGetPythonParenCompletions(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        public void GetPythonParenCompletionsAsync(string source, int line, int column) {
            this.GetPythonParenCompletionsAsync(source, line, column, null);
        }
        
        public void GetPythonParenCompletionsAsync(string source, int line, int column, object userState) {
            if ((this.GetPythonParenCompletionsOperationCompleted == null)) {
                this.GetPythonParenCompletionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPythonParenCompletionsCompleted);
            }
            this.InvokeAsync("GetPythonParenCompletions", new object[] {
                        source,
                        line,
                        column}, this.GetPythonParenCompletionsOperationCompleted, userState);
        }
        
        private void OnGetPythonParenCompletionsCompleted(object arg) {
            if ((this.GetPythonParenCompletionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPythonParenCompletionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://rextester.com/")]
    public enum Languages {
        
        /// <remarks/>
        Java,
        
        /// <remarks/>
        Python,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        CPP,
        
        /// <remarks/>
        Php,
        
        /// <remarks/>
        Pascal,
        
        /// <remarks/>
        ObjectiveC,
        
        /// <remarks/>
        Haskell,
        
        /// <remarks/>
        Ruby,
        
        /// <remarks/>
        Perl,
        
        /// <remarks/>
        Lua,
        
        /// <remarks/>
        Nasm,
        
        /// <remarks/>
        Javascript,
        
        /// <remarks/>
        Lisp,
        
        /// <remarks/>
        Prolog,
        
        /// <remarks/>
        Go,
        
        /// <remarks/>
        Scala,
        
        /// <remarks/>
        Scheme,
        
        /// <remarks/>
        Nodejs,
        
        /// <remarks/>
        Python3,
        
        /// <remarks/>
        Octave,
        
        /// <remarks/>
        CClang,
        
        /// <remarks/>
        CppClang,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://rextester.com/")]
    public partial class Result {
        
        /// <remarks/>
        public string Errors;
        
        /// <remarks/>
        public byte[] Errors_Bytes;
        
        /// <remarks/>
        public string Warnings;
        
        /// <remarks/>
        public byte[] Warnings_Bytes;
        
        /// <remarks/>
        public string Output;
        
        /// <remarks/>
        public bool IsOutputCompressed;
        
        /// <remarks/>
        public byte[] Output_Bytes;
        
        /// <remarks/>
        public string Stats;
        
        /// <remarks/>
        public string Exit_Status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, DataType="int")]
        public System.Nullable<int> Exit_Code;
        
        /// <remarks/>
        public string System_Error;
        
        /// <remarks/>
        public byte[][] Files;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://rextester.com/")]
    public partial class DiffResult {
        
        /// <remarks/>
        public bool IsError;
        
        /// <remarks/>
        public string Result;
    }
    
    public partial class DoWorkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoWorkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Result Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }
    
    public delegate void DoWorkCompletedEventHandler(object sender, DoWorkCompletedEventArgs args);
    
    public partial class SumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public delegate void SumCompletedEventHandler(object sender, SumCompletedEventArgs args);
    
    public partial class DiffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DiffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DiffResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DiffResult)(this.results[0]));
            }
        }
    }
    
    public delegate void DiffCompletedEventHandler(object sender, DiffCompletedEventArgs args);
    
    public delegate void GetPythonDotCompletionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
    
    public delegate void GetPythonParenCompletionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs args);
}
